[{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats.html","title":"BioFSharp.Stats","content":"OntologyEnrichment \nPhylTree \nRNASeq \nSAEPT","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-ontologyenrichment.html","title":"OntologyEnrichment","content":"OntologyEnrichment \n \nOntologyEnrichment.GseaResult\u003C\u0027a\u003E \nGseaResult\u003C\u0027a\u003E \nOntologyEnrichment.OntologyItem\u003C\u0027a\u003E \nOntologyItem\u003C\u0027a\u003E \nOntologyEnrichment.createOntologyItem \ncreateOntologyItem \nOntologyEnrichment.createGseaResult \ncreateGseaResult \nOntologyEnrichment.splitMultipleAnnotationsBy \nsplitMultipleAnnotationsBy \nOntologyEnrichment.splitMapManOntologyItemsBy \nsplitMapManOntologyItemsBy \nOntologyEnrichment.expandOntologyTree \nexpandOntologyTree \nOntologyEnrichment.CalcHyperGeoPvalue \nCalcHyperGeoPvalue \nOntologyEnrichment.CalcSimpleOverEnrichment \nCalcSimpleOverEnrichment \nOntologyEnrichment.CalcOverEnrichment \nCalcOverEnrichment","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-ontologyenrichment.html#createOntologyItem","title":"OntologyEnrichment.createOntologyItem","content":"OntologyEnrichment.createOntologyItem \ncreateOntologyItem \n Creates an item in an ontology set","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-ontologyenrichment.html#createGseaResult","title":"OntologyEnrichment.createGseaResult","content":"OntologyEnrichment.createGseaResult \ncreateGseaResult \n Creates a gene set enrichment result ","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-ontologyenrichment.html#splitMultipleAnnotationsBy","title":"OntologyEnrichment.splitMultipleAnnotationsBy","content":"OntologyEnrichment.splitMultipleAnnotationsBy \nsplitMultipleAnnotationsBy \nSplits an OntologyEntry with seperator concatenated TermIds","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-ontologyenrichment.html#splitMapManOntologyItemsBy","title":"OntologyEnrichment.splitMapManOntologyItemsBy","content":"OntologyEnrichment.splitMapManOntologyItemsBy \nsplitMapManOntologyItemsBy \n Splits MapMan OntologyEntries with seperator concatenated TermIds\n Attention: Also parses string to int to get rid of 0 - terms","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-ontologyenrichment.html#expandOntologyTree","title":"OntologyEnrichment.expandOntologyTree","content":"OntologyEnrichment.expandOntologyTree \nexpandOntologyTree \n Extends leaf OntologyEntries to their full tree","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-ontologyenrichment.html#CalcHyperGeoPvalue","title":"OntologyEnrichment.CalcHyperGeoPvalue","content":"OntologyEnrichment.CalcHyperGeoPvalue \nCalcHyperGeoPvalue \n Calculates p value based on hypergeometric distribution (pValue \u003C= k)","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-ontologyenrichment.html#CalcSimpleOverEnrichment","title":"OntologyEnrichment.CalcSimpleOverEnrichment","content":"OntologyEnrichment.CalcSimpleOverEnrichment \nCalcSimpleOverEnrichment \n Calculates functional term enrichment","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-ontologyenrichment.html#CalcOverEnrichment","title":"OntologyEnrichment.CalcOverEnrichment","content":"OntologyEnrichment.CalcOverEnrichment \nCalcOverEnrichment \n Calculates functional term enrichment","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-ontologyenrichment-gsearesult-1.html","title":"GseaResult\u003C\u0027a\u003E","content":"GseaResult\u003C\u0027a\u003E \n Represents a gene set enrichment result  \nGseaResult\u003C\u0027a\u003E.OntologyTerm \nOntologyTerm \nGseaResult\u003C\u0027a\u003E.ItemsInBin \nItemsInBin \nGseaResult\u003C\u0027a\u003E.NumberOfDEsInBin \nNumberOfDEsInBin \nGseaResult\u003C\u0027a\u003E.NumberInBin \nNumberInBin \nGseaResult\u003C\u0027a\u003E.TotalNumberOfDE \nTotalNumberOfDE \nGseaResult\u003C\u0027a\u003E.TotalUniverse \nTotalUniverse \nGseaResult\u003C\u0027a\u003E.PValue \nPValue","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-ontologyenrichment-gsearesult-1.html#OntologyTerm","title":"GseaResult\u003C\u0027a\u003E.OntologyTerm","content":"GseaResult\u003C\u0027a\u003E.OntologyTerm \nOntologyTerm \nOntology term e.g. MapMan term, GO term ...","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-ontologyenrichment-gsearesult-1.html#ItemsInBin","title":"GseaResult\u003C\u0027a\u003E.ItemsInBin","content":"GseaResult\u003C\u0027a\u003E.ItemsInBin \nItemsInBin \nSequence of single items associated to the ontology term ","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-ontologyenrichment-gsearesult-1.html#NumberOfDEsInBin","title":"GseaResult\u003C\u0027a\u003E.NumberOfDEsInBin","content":"GseaResult\u003C\u0027a\u003E.NumberOfDEsInBin \nNumberOfDEsInBin \nNumber of significantly altered items in \u0027OntologyTerm\u0027 bin","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-ontologyenrichment-gsearesult-1.html#NumberInBin","title":"GseaResult\u003C\u0027a\u003E.NumberInBin","content":"GseaResult\u003C\u0027a\u003E.NumberInBin \nNumberInBin \nNumber of items in \u0027OntologyTerm\u0027 bin","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-ontologyenrichment-gsearesult-1.html#TotalNumberOfDE","title":"GseaResult\u003C\u0027a\u003E.TotalNumberOfDE","content":"GseaResult\u003C\u0027a\u003E.TotalNumberOfDE \nTotalNumberOfDE \nNumber of significantly altered items within the total data set","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-ontologyenrichment-gsearesult-1.html#TotalUniverse","title":"GseaResult\u003C\u0027a\u003E.TotalUniverse","content":"GseaResult\u003C\u0027a\u003E.TotalUniverse \nTotalUniverse \nNumber of all items (expanded)","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-ontologyenrichment-gsearesult-1.html#PValue","title":"GseaResult\u003C\u0027a\u003E.PValue","content":"GseaResult\u003C\u0027a\u003E.PValue \nPValue \n","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-ontologyenrichment-ontologyitem-1.html","title":"OntologyItem\u003C\u0027a\u003E","content":"OntologyItem\u003C\u0027a\u003E \n Represents an item in an ontology set \nOntologyItem\u003C\u0027a\u003E.Id \nId \nOntologyItem\u003C\u0027a\u003E.OntologyTerm \nOntologyTerm \nOntologyItem\u003C\u0027a\u003E.GroupIndex \nGroupIndex \nOntologyItem\u003C\u0027a\u003E.Item \nItem","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-ontologyenrichment-ontologyitem-1.html#Id","title":"OntologyItem\u003C\u0027a\u003E.Id","content":"OntologyItem\u003C\u0027a\u003E.Id \nId \n","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-ontologyenrichment-ontologyitem-1.html#OntologyTerm","title":"OntologyItem\u003C\u0027a\u003E.OntologyTerm","content":"OntologyItem\u003C\u0027a\u003E.OntologyTerm \nOntologyTerm \n","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-ontologyenrichment-ontologyitem-1.html#GroupIndex","title":"OntologyItem\u003C\u0027a\u003E.GroupIndex","content":"OntologyItem\u003C\u0027a\u003E.GroupIndex \nGroupIndex \n","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-ontologyenrichment-ontologyitem-1.html#Item","title":"OntologyItem\u003C\u0027a\u003E.Item","content":"OntologyItem\u003C\u0027a\u003E.Item \nItem \n","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-phyltree.html","title":"PhylTree","content":"PhylTree \n \nPhylTree.ofHierarchicalCluster \nofHierarchicalCluster \nPhylTree.ofTaggedSequencesWithLinker \nofTaggedSequencesWithLinker \nPhylTree.ofTaggedBioSequences \nofTaggedBioSequences","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-phyltree.html#ofHierarchicalCluster","title":"PhylTree.ofHierarchicalCluster","content":"PhylTree.ofHierarchicalCluster \nofHierarchicalCluster \n converts the input hierarchical clustering to a phylogenetig tree and conserves the distance insformation.\n In contrast to the clustering result, the distance value of a Branch represents the distance to its Parent, \n not the distance that all children have to this Branch.","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-phyltree.html#ofTaggedSequencesWithLinker","title":"PhylTree.ofTaggedSequencesWithLinker","content":"PhylTree.ofTaggedSequencesWithLinker \nofTaggedSequencesWithLinker \n\n Performs hierarchical clustering of the input TaggedSequences using the provided distance function and linker. Returns the result as a Phylogenetic tree.\n ","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-phyltree.html#ofTaggedBioSequences","title":"PhylTree.ofTaggedBioSequences","content":"PhylTree.ofTaggedBioSequences \nofTaggedBioSequences \n\n Performs hierarchical clustering of the input TaggedSequences using the provided distance function. Returns the result as a Phylogenetic tree.\n ","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-rnaseq.html","title":"RNASeq","content":"RNASeq \n Contains types and functions needed for RNA-Seq normalization \nRNASeq.NormalizationMethod \nNormalizationMethod \nRNASeq.NormalizedCounts \nNormalizedCounts \nRNASeq.RNASeqInput \nRNASeqInput \nRNASeq.rpkms \nrpkms \nRNASeq.tpms \ntpms","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-rnaseq.html#rpkms","title":"RNASeq.rpkms","content":"RNASeq.rpkms \nrpkms \n Returns RPKM normalized data","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-rnaseq.html#tpms","title":"RNASeq.tpms","content":"RNASeq.tpms \ntpms \n Returns TPM normalized data","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-rnaseq-normalizationmethod.html","title":"NormalizationMethod","content":"NormalizationMethod \n \nNormalizationMethod.RPKM \nRPKM \nNormalizationMethod.TPM \nTPM","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-rnaseq-normalizationmethod.html#RPKM","title":"NormalizationMethod.RPKM","content":"NormalizationMethod.RPKM \nRPKM \n","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-rnaseq-normalizationmethod.html#TPM","title":"NormalizationMethod.TPM","content":"NormalizationMethod.TPM \nTPM \n","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-rnaseq-normalizedcounts.html","title":"NormalizedCounts","content":"NormalizedCounts \n Type with GeneID, normalized data and method of normalization \nNormalizedCounts.Create \nCreate \nNormalizedCounts.GeneID \nGeneID \nNormalizedCounts.NormalizedCount \nNormalizedCount \nNormalizedCounts.NormalizationMethod \nNormalizationMethod","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-rnaseq-normalizedcounts.html#Create","title":"NormalizedCounts.Create","content":"NormalizedCounts.Create \nCreate \n","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-rnaseq-normalizedcounts.html#GeneID","title":"NormalizedCounts.GeneID","content":"NormalizedCounts.GeneID \nGeneID \n","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-rnaseq-normalizedcounts.html#NormalizedCount","title":"NormalizedCounts.NormalizedCount","content":"NormalizedCounts.NormalizedCount \nNormalizedCount \n","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-rnaseq-normalizedcounts.html#NormalizationMethod","title":"NormalizedCounts.NormalizationMethod","content":"NormalizedCounts.NormalizationMethod \nNormalizationMethod \n","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-rnaseq-rnaseqinput.html","title":"RNASeqInput","content":"RNASeqInput \n Input type for RNA-Seq normalization \nRNASeqInput.Create \nCreate \nRNASeqInput.GeneID \nGeneID \nRNASeqInput.GeneLength \nGeneLength \nRNASeqInput.GeneCount \nGeneCount","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-rnaseq-rnaseqinput.html#Create","title":"RNASeqInput.Create","content":"RNASeqInput.Create \nCreate \n","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-rnaseq-rnaseqinput.html#GeneID","title":"RNASeqInput.GeneID","content":"RNASeqInput.GeneID \nGeneID \n","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-rnaseq-rnaseqinput.html#GeneLength","title":"RNASeqInput.GeneLength","content":"RNASeqInput.GeneLength \nGeneLength \n","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-rnaseq-rnaseqinput.html#GeneCount","title":"RNASeqInput.GeneCount","content":"RNASeqInput.GeneCount \nGeneCount \n","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-saept.html","title":"SAEPT","content":"SAEPT \n Surprisal Analysis Empirical Permutation Test (SAEPT)  \nSAEPT.SAEPTCharacterization \nSAEPTCharacterization \nSAEPT.SAEPTResult\u003C\u0027a\u003E \nSAEPTResult\u003C\u0027a\u003E \nSAEPT.prepareDataColumn \nprepareDataColumn \nSAEPT.prepareDataset \nprepareDataset \nSAEPT.compute \ncompute \nSAEPT.computeOfSARes \ncomputeOfSARes \nSAEPT.computeOfSAResAsync \ncomputeOfSAResAsync","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-saept.html#prepareDataColumn","title":"SAEPT.prepareDataColumn","content":"SAEPT.prepareDataColumn \nprepareDataColumn \nutility function to prepare a dataset column for SAEPT characterization. The ontology map can be created by using the BioFSharp.BioDB module. \n\nidentifiers: a string array containing the annotations of the data at the same index, used as lookup in the ontology map. \nrawData: feature array of interest, must be same length as annotations.","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-saept.html#prepareDataset","title":"SAEPT.prepareDataset","content":"SAEPT.prepareDataset \nprepareDataset \nutility function to prepare a dataset (in column major form) for SAEPT characterization. The ontology map can be created by using the BioFSharp.BioDB module.\nidentifiers: a string array containing the annotations of the data at the same index, used as lookup in the ontology map. \nrawData: feature matrix of interest, columns must have same length as identifiers","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-saept.html#compute","title":"SAEPT.compute","content":"SAEPT.compute \ncompute \nCompute SAEPT (Surprisal AnalysIs EmpiricaL pErmutatioN Test) for the given annotated dataset. This empirical test was\ninitially designed for the biological application of Surprisal Analysis to test the weight distribution of a given bin of annotations is significantly different than a random distribution \nof the same size given the whole dataset, but it should be applicable to similar types of datasets.\n\nInput: \n\n- verbose: if true, bootstrap iterations and runtime for bootstrapping is printed\n\n- bootstrapIterations: the amount of distributions to sample from the whole dataset to create test distributions for each binsize present in the data\n\n- data: annotated dataset (containing ontology items with the associated feature)\n\na SAEPT test returns 3 descriptors for the input data:\nAbsolute descriptor: test distributions and tests are performed on the absolute values of the dataset\nNegative descriptor: test distributions and tests are performed on the negative values of the dataset only\nAbsolute descriptor: test distributions and tests are performed on the positive values of the dataset only","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-saept.html#computeOfSARes","title":"SAEPT.computeOfSARes","content":"SAEPT.computeOfSARes \ncomputeOfSARes \nCompute SAEPT (Surprisal AnalysIs EmpiricaL pErmutatioN Test) for the given Surprisal Analysis result. This empirical test was\ndesigned for the biological application of Surprisal Analysis to test the weight distribution of a given bin of annotations is significantly different than a random distribution \nof the same size given the whole dataset.\n\nInput: \n\n- verbose: if true, bootstrap iterations and runtime for bootstrapping is printed\n\n- ontologyMap: maps identifiers of the data to ontology annotations (can be created using the BioFSharp.BioDB module)\n\n- identifiers: a string array containing the annotations of the data at the same index, used as lookup in the ontology map. \n\n- bootstrapIterations: the amount of distributions to sample from the whole dataset to create test distributions for each binsize present in the data\n\n- saRes: the Surprisal Analysis Result to test\n\na SAEPT test returns 3 descriptors for each constraint of the Surprisal anlysis result:\nAbsolute descriptor: test distributions and tests are performed on the absolute values of the dataset\nNegative descriptor: test distributions and tests are performed on the negative values of the dataset only\nAbsolute descriptor: test distributions and tests are performed on the positive values of the dataset only","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-saept.html#computeOfSAResAsync","title":"SAEPT.computeOfSAResAsync","content":"SAEPT.computeOfSAResAsync \ncomputeOfSAResAsync \nAsync version of computeOfSARes to use for parallelization (computeOfSAResAsync ( .. ) |\u003E Async.Parallel |\u003E Async.RunSynchronously)","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-saept-saeptcharacterization.html","title":"SAEPTCharacterization","content":"SAEPTCharacterization \n \nSAEPTCharacterization.OntologyTerm \nOntologyTerm \nSAEPTCharacterization.PValue \nPValue \nSAEPTCharacterization.BinSize \nBinSize \nSAEPTCharacterization.WeightSum \nWeightSum","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-saept-saeptcharacterization.html#OntologyTerm","title":"SAEPTCharacterization.OntologyTerm","content":"SAEPTCharacterization.OntologyTerm \nOntologyTerm \n","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-saept-saeptcharacterization.html#PValue","title":"SAEPTCharacterization.PValue","content":"SAEPTCharacterization.PValue \nPValue \n","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-saept-saeptcharacterization.html#BinSize","title":"SAEPTCharacterization.BinSize","content":"SAEPTCharacterization.BinSize \nBinSize \n","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-saept-saeptcharacterization.html#WeightSum","title":"SAEPTCharacterization.WeightSum","content":"SAEPTCharacterization.WeightSum \nWeightSum \n","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-saept-saeptresult-1.html","title":"SAEPTResult\u003C\u0027a\u003E","content":"SAEPTResult\u003C\u0027a\u003E \n \nSAEPTResult\u003C\u0027a\u003E.RawData \nRawData \nSAEPTResult\u003C\u0027a\u003E.AbsoluteDescriptor \nAbsoluteDescriptor \nSAEPTResult\u003C\u0027a\u003E.PositiveDescriptor \nPositiveDescriptor \nSAEPTResult\u003C\u0027a\u003E.NegativeDescriptor \nNegativeDescriptor \nSAEPTResult\u003C\u0027a\u003E.BootstrapIterations \nBootstrapIterations","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-saept-saeptresult-1.html#RawData","title":"SAEPTResult\u003C\u0027a\u003E.RawData","content":"SAEPTResult\u003C\u0027a\u003E.RawData \nRawData \n","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-saept-saeptresult-1.html#AbsoluteDescriptor","title":"SAEPTResult\u003C\u0027a\u003E.AbsoluteDescriptor","content":"SAEPTResult\u003C\u0027a\u003E.AbsoluteDescriptor \nAbsoluteDescriptor \n","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-saept-saeptresult-1.html#PositiveDescriptor","title":"SAEPTResult\u003C\u0027a\u003E.PositiveDescriptor","content":"SAEPTResult\u003C\u0027a\u003E.PositiveDescriptor \nPositiveDescriptor \n","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-saept-saeptresult-1.html#NegativeDescriptor","title":"SAEPTResult\u003C\u0027a\u003E.NegativeDescriptor","content":"SAEPTResult\u003C\u0027a\u003E.NegativeDescriptor \nNegativeDescriptor \n","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/reference/biofsharp-stats-saept-saeptresult-1.html#BootstrapIterations","title":"SAEPTResult\u003C\u0027a\u003E.BootstrapIterations","content":"SAEPTResult\u003C\u0027a\u003E.BootstrapIterations \nBootstrapIterations \n","headings":[],"type":"apiDocs"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/index.html","title":"BioFSharp.Stats\n","content":"BioFSharp.Stats\n\n\n\nBioFSharp.Stats contains statistical functions with a clear biological focus such as Gene Set Enrichment Analysis (GSEA).\nBioFSharp.Stats is part of the BioFSharp extension package ecosystem.\n\n\n\nBuild status (ubuntu and windows)\nTest Coverage\n\n\n\n\n\n\n\n\n\n\nFrom 2.0.0 onwards, this package will have a decoupled release schedule from the core BioFSharp package.\nThis means that the versioning will be independent and may not follow the same versioning scheme as BioFSharp.\nThe last coupled release was 2.0.0-preview.3.\n","headings":["BioFSharp.Stats"],"type":"content"},{"uri":"https://BioFSharp.github.io/BioFSharp.Stats/GSEA.html","title":"Gene set enrichment analysis (GSEA)\n","content":"Gene set enrichment analysis (GSEA)\nWhen performing high-troughput experiments the question arises how to analyze the resulting huge data sets.\nOf course the analysis of each single item separately is possible but unefficient and cumberersome.\nIf you want to compare the transcript/protein composition of a system before and after a treatment it is useful\nto make use of a gene set enrichment analysis (GSEA) to identify overrepresented transcript/protein groups.\nThe grouping can be based on MapMan- or GO-annotations or other shared properties.\nFor further information visit GSEA publication.\nMethod\nImagine an experiment, in which 1000 proteins were measured. Within these 1000 proteins there are 25 proteins\nof a specific functional group (heat shock response).\nBy treating the organism(s) 200 proteins are significantly altered. 10 of the 25 heat responsive proteins\ncan be found within these 200.\nNull-Hypothesis: The number of identified altered items is due to chance.\nQuestion: What is the probability, that these 10 or more proteins occuring in the 200 altered proteins by chance?\nThe hypergeomentric distribution can answer this question:\n\nN is the population size (1000 proteins)\nK is the number of success states in the population (25 heat responsive proteins)\nn is the number of draws (200 significantly altered proteins)\nk is the number of observed successes (10 or higher)\n\nResult: 0.0161 = 1.6%\nIf the calculated probability is small, it is very unlikely, that the observed effect is due to chance.\nThis implies, that under the given condition the heat response proteins are enriched.\nSplit p value threshold\nThe discrete nature of the hypergeometric distribution prevents the significance to reach 0.05 exactly. Especially in small bin sizes there always is a range of \\(\\alpha\\)-level space that must be sacrificed leading to a lower \\(\\alpha\\) than intended.\nTo mitigate this loss of power you can use a mid p-value, that has the form of:\n\n\\(P(K\u0026gt;k) \u002B 0.5P(K=k)\\) or equivalently \\(0.5(P(K\u0026gt;k) \u002B P(K\\geq k))\\)\n\nThe resulting p-values are not conservative any more. The actual alpha level may be higher than intended!\nReferences\n\nFigure A1 in Schneider, Venn, and M\u00FChlhaus; TMEA: A Thermodynamically Motivated Framework for Functional Characterization of Biological Responses to System Acclimation; Entropy 2020; https://doi.org/10.3390/e22091030\nRivals et al.; Enrichment or depletion of a GO category within a class of genes: which test?; Bioinformatics 2006; doi:10.1093/bioinformatics/btl633\nRubin-Delanchy et al.; Meta-Analysis of Mid-p-Values: Some New Results based on the Convex Order.; Journal of the American Statistical Association 2018; doi:10.1080/01621459.2018.1469994\nAgresti and Min; On Small-Sample Confidence Intervals for Parameters in Discrete Distributions; Biometrics 2001;  https://doi.org/10.1111/j.0006-341X.2001.00963.x\n\nUsage\n//Usage:\n//At first all items are converted into an OntologyItem type:\n\nopen BioFSharp\nopen BioFSharp.Stats\n\n//Example item\n//Protein:                  HSP70\n//MapManAnnotation:         GMM:29.6.2.3;GMM:20.2.1\n//Significantly altered?:   true\n\n//Creates an OntologyItem with an identifier, an Ontologyterm, a group index and an arbitrary and \n//optional field. The groupIndex is based on prior analyis and defines if the items belongs to a \n//specific group. If significantly altered proteins were identified, you can assign index \u0026#39;1\u0026#39; to \n//all altered proteins and \u0026#39;0\u0026#39; to all other. The choice of the index is up to you, but you have \n//to remind it for later steps.\nlet item = OntologyEnrichment.createOntologyItem \u0026quot;Cre06.g250100\u0026quot; \u0026quot;protein.folding.chaperones and co-chaperones.HSP70s;stress.abiotic.heat\u0026quot; 1 \u0026quot;HSP70\u0026quot;\n\n\n//If more than one ontology term is possible, you can use this function to split the item, so that\n//every resulting item contains just one ontology term.\nlet splitItems = OntologyEnrichment.splitMultipleAnnotationsBy \u0026#39;;\u0026#39; item\n\n//create a list of all items in your experiment\nlet items = [splitItems(*...*)] |\u0026gt; Seq.concat\n\n//When dealing with MapMan annotations all levels of the descriptions should be considered.\n//\u0026quot;stress.abiotic.heat\u0026quot; -\u0026gt; [\u0026quot;stress.abiotic.heat\u0026quot;; \u0026quot;stress.abiotic\u0026quot;; \u0026quot;stress\u0026quot;] \nlet expandedItems = OntologyEnrichment.expandOntologyTree items\n\n\n//now the dataset is ready for performing the enrichment analysis\n//deGroupIndex:         which index should be considered as success? (in this case \u0026#39;1\u0026#39;)\n//splitPValueThreshold: if a bin size is below this threshold, the resulting pvalue \n//                      is split up (-\u0026gt; increased to lower the impact of small bins) (default 5).\n//minNumberInTerm:      what is the minimal number of items that should be \n//                      within a bin to consider the bin at all (default 2).\n//data:                 sequence of expanded and split ontology items\nlet gseaResult = OntologyEnrichment.CalcOverEnrichment 1 (Some 5) (Some 2) expandedItems\n\n\nlet filterAndSortEnrichedModules =\n    gseaResult\n    |\u0026gt; Seq.filter (fun x -\u0026gt; x.PValue \u0026lt; 0.05)\n    |\u0026gt; Seq.sortByDescending (fun x -\u0026gt; x.NumberOfDEsInBin)\n\n//the result type contains the following fields:\n//GseaResult:\n//    OntologyTerm     : OntologyTerm(MapMan-Term/GO-Term/...)\n//    ItemsInBin       : Sequence of single items belonging to the ontology term \n//    NumberOfDEsInBin : Number of significantly altered items in \u0026#39;OntologyTerm\u0026#39; bin\n//    NumberInBin      : Number of items in \u0026#39;OntologyTerm\u0026#39; bin\n//    TotalNumberOfDE  : Number of significantly altered items\n//    TotalUniverse    : Number of all items (expanded)\n//    PValue           : p value\n\n","headings":["Gene set enrichment analysis (GSEA)","Method","Split p value threshold","Usage"],"type":"content"}]